---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate'
import BaseLayout from '@/layouts/BaseLayout'
import Tag from '@/components/Tag'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'

type Props = {
	data: CollectionEntry<'blog'>['data']
	headings: MarkdownHeading[]
	readTime: string
}

const { data, readTime, headings } = Astro.props
const { title, description, pubDate, updatedDate, heroImage, tags } = data

const articleDate = pubDate.toISOString()
---

<BaseLayout
	title={title}
	description={description}
	image={heroImage?.src}
	articleDate={articleDate}>
	<article class='md:py-4 max-w-xs sm:max-w-none md:max-w-none'>
		<header class='mb-3 flex flex-col justify-center items-center gap-6'>
			<div class='flex flex-col gap-2'>
				<div class='flex items-center justify-center gap-x-1'>
					<p class='text-center text-sm text-opacity-50'>
						Published <FormattedDate date={pubDate} />
					</p>
					<p class='text-center text-sm text-opacity-50 font-bold'>
						- {readTime}
					</p>
				</div>
				<h1 class='text-center text-4xl md:text-6xl md:mb-2.5 font-semibold'>
					{title}
				</h1>
			</div>

			<div class='flex flex-wrap gap-2 md:gap-5'>
				{tags.map((tag) => <Tag>{tag}</Tag>)}
			</div>
		</header>

		<div class='relative'>
			{
				heroImage && (
					<Image
						src={heroImage}
						width={1000}
						height={1200}
						quality={100}
						format='jpg'
						class='square-md w-full max-h-[1000px] my-8 object-cover opacity-0 transition-opacity duration-700 ease-in'
						alt={`img of ${title}`}
					/>
				)
			}
			<div
				style='backdrop-filter: blur(25px) saturate(180%);'
				class='placeholder absolute inset-0 blur rounded-md transition-opacity duration-700 ease-out border-2 border-neutral-200 bg-gray-200 dark:border-neutral-900 dark:bg-zinc-900 bg-opacity-90'>
			</div>
		</div>

		{
			updatedDate && (
				<div class='last-updated-on'>
					Last updated on <FormattedDate date={updatedDate} />
				</div>
			)
		}

		<hr />

		<div>
			<slot />
		</div>
	</article>
</BaseLayout>

<script is:inline>
	const img = document.querySelector('img')
	const placeholder = document.querySelector('.placeholder')

	img?.addEventListener('load', () => {
		img.classList.add('opacity-100')
		placeholder.classList.add('opacity-0')
	})
</script>

<script>
	function handleIntersection(
		entries: IntersectionObserverEntry[],
		observer: IntersectionObserver
	) {
		entries.forEach((entry) => {
			const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

			if (entry.isIntersecting) {
				index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
				index?.classList.add(
					'bg-slate-500',
					'dark:bg-slate-700',
					'text-white',
					'font-bold',
					'transition-colors',
					'duration-200'
				)
			} else {
				index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
				index?.classList.remove(
					'bg-slate-500',
					'dark:bg-slate-700',
					'text-white',
					'font-bold',
					'transition-colors',
					'duration-200'
				)
			}
		})
	}

	const headings = document.querySelectorAll(
		'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
	)

	const options = {
		root: null,
		rootMargin: ' 15% 0px 0% 0px ',
		threshold: 1
	}

	const observer = new IntersectionObserver(handleIntersection, options)

	headings.forEach((heading) => {
		observer.observe(heading)
	})
</script>
